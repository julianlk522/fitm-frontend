---
import Rankings from '../../components/Rankings/Rankings.astro'
import ScrollUp from '../../components/ScrollUp.astro'
import SearchFilters from '../../components/SearchFilters/Filters'
import Profile from '../../components/TmapProfile/Profile'
import { TMAP_ENDPOINT } from '../../constants'
import BaseLayout from '../../layouts/BaseLayout.astro'
import * as types from '../../types'
import fetch_with_handle_redirect from '../../util/fetch_with_handle_redirect'

// Auth
const token = Astro.cookies.get('token')?.value
const user = Astro.cookies.get('user')?.value

// Params
// login_name
const { login_name } = Astro.params
if (!login_name) {
	return Astro.redirect('/')
}
let page_title = `${login_name}'s Treasure Map`

// Config
// cats
let cats = ""
let cats_split: string[] = []
if (Astro.url.searchParams.get('cats')) {
	cats = Astro.url.searchParams.get('cats') as string
	cats_split = cats.split(',')

	if (cats.length) {
		page_title += ' (Filtered)'
	}
}
// Encode cats reserved chars
const encoded_cats = encodeURIComponent(cats)

// period
let period: types.Period = 'all'
if (
	Astro.url.searchParams.get('period') &&
	(types.Periods as readonly string[]).includes(
		Astro.url.searchParams.get('period') as types.Period
	)
) {
	period = Astro.url.searchParams.get('period') as types.Period
}

// nsfw
let nsfw = false
if (Astro.url.searchParams.get('nsfw') && Astro.url.searchParams.get('nsfw') === 'true') {
	nsfw = true
}

// sort_by
let sort_by: types.SortMetric = 'rating'
const sort_by_params = Astro.url.searchParams.get('sort_by')
const is_sorted_by_newest = sort_by_params === 'newest'
if (is_sorted_by_newest) {
	sort_by = 'newest'
}

// url contains
let url_contains = ""
if (Astro.url.searchParams.get('url_contains')) {
	url_contains = Astro.url.searchParams.get('url_contains') as string
}

// Get Tmap
let tmap: types.TreasureMap | types.FilteredTreasureMap
let tmap_url = TMAP_ENDPOINT + `/${login_name}`
if (cats) {
	tmap_url += `?cats=${encoded_cats}`
}

if (period) {
	if (cats) {
		tmap_url += `&period=${period}`
	} else {
		tmap_url += `?period=${period}`
	}
}

if (url_contains) {
	if (cats || period) {
		tmap_url += `&url_contains=${url_contains}`
	} else {
		tmap_url += `?url_contains=${url_contains}`
	}
}

if (is_sorted_by_newest) {
	if (cats || period || url_contains) {
		tmap_url += `&sort_by=newest`
	} else {
		tmap_url += `?sort_by=newest`
	}
}

if (nsfw) {
	if (cats || period || url_contains || is_sorted_by_newest) {
		tmap_url += `&nsfw=true`
	} else {
		tmap_url += `?nsfw=true`
	}
}

const tmap_resp = token
	? await fetch_with_handle_redirect(tmap_url, {
			headers: {
				Authorization: `Bearer ${token}`,
			},
		})
	: await fetch_with_handle_redirect(tmap_url)
if (!tmap_resp.Response || tmap_resp.RedirectTo) {
	return Astro.redirect(tmap_resp.RedirectTo)
}
tmap = await tmap_resp.Response.json()

// Display about if used (unfiltered only)
let profile: types.Profile | undefined
if (!cats && tmap.hasOwnProperty('Profile')) {
	profile = (tmap as types.TreasureMap).Profile
}
---

<BaseLayout Title={page_title}>
	<main>
		<h1 class={profile ? 'has-profile' : ''}>{login_name}</h1>

		{profile ? (
			<Profile
				client:idle
				LoginName={login_name}
				SignedInUser={user}
				CreatedAt={profile.Created}
				InitialPFPFileName={profile.PFP}
				InitialAboutText={profile.About}
				InitialEmailText={profile.Email}
				Token={token}
			/>
		) : null}

		<SearchFilters
			client:load 
			Endpoint={"/map"}
			TmapOwnerLoginName={login_name}
			TmapNSFWLinksCount={tmap.NSFWLinksCount}
			InitialCats={cats_split}
			InitialPeriod={period}
			InitialURLContains={url_contains}
			InitialSortBy={sort_by}
			InitialNSFW={nsfw}
		/>

		<Rankings
			CatsParams={encoded_cats}
			PeriodParams={period}
			NSFWParams={nsfw}
			SortByParams={sort_by}
			URLContainsParams={url_contains}
			TopCats={tmap.Cats}
			Tmap={tmap}
			IsTmapFromUser={login_name}
			User={user}
			Token={token}
		/>

		<ScrollUp />
	</main>
</BaseLayout>

<style>	
	h1 {
		text-align: left;
	}
	h1.has-profile {
		margin-bottom: 0;
	}

	p#profile-created {
		margin: 0.5rem 0 1rem;
	}

	#profile {
		padding-top: 0;

		astro-island:has(div#profile-pic) + pre {
			margin-top: 1rem;
		}
	}
</style>
