---
import Link from '../../components/Link/Link'
import TopCats from '../../components/Rankings/TopCats.astro'
import ScrollUp from '../../components/ScrollUp.astro'
import TagCat from "../../components/Tag/TagCat"
import Profile from '../../components/TmapProfile/Profile'
import { TMAP_ENDPOINT } from '../../constants'
import BaseLayout from '../../layouts/BaseLayout.astro'
import * as types from '../../types'
import { tmap_sections } from '../../types'
import fetch_with_handle_redirect from '../../util/fetch_with_handle_redirect'

// Auth
const token = Astro.cookies.get('token')?.value
const user = Astro.cookies.get('user')?.value

// Params
// login_name
const { login_name } = Astro.params
if (!login_name) {
	return Astro.redirect('/')
}
const is_signed_in_user = login_name === user
let page_title = `${login_name}'s Treasure Map`

// config
// cats
let cats = ""
let cats_split: string[] = []
if (Astro.url.searchParams.get('cats')) {
	cats = Astro.url.searchParams.get('cats') as string
	cats_split = cats.split(',')

	if (cats.length) {
		page_title += ' (Filtered)'
	}
}
// Encode cats reserved chars
const encoded_cats = encodeURIComponent(cats)

// nsfw
let nsfw = false
if (Astro.url.searchParams.get('nsfw') && Astro.url.searchParams.get('nsfw') === 'true') {
	nsfw = true
}

// sort_by
let sort_by: types.SortMetric | undefined
const sort_by_params = Astro.url.searchParams.get('sort_by')
const is_sorted_by_newest = sort_by_params === 'newest'
if (is_sorted_by_newest) {
	sort_by = 'newest'
}

const has_cats_or_nsfw_params = cats || nsfw
const sort_by_params_separator = has_cats_or_nsfw_params ? '&' : '?'

let opposite_sort_search_params = `${cats ? '?cats=' + encoded_cats : ''}${nsfw ? cats? '&nsfw=true' : '?nsfw=true' : ''}`
if (!is_sorted_by_newest) {
	opposite_sort_search_params += `${sort_by_params_separator}sort_by=newest`
}
const opposite_sort_URL = Astro.url.pathname + opposite_sort_search_params

// Get Tmap
let tmap: types.TreasureMap | types.FilteredTreasureMap
let tmap_url = TMAP_ENDPOINT + `/${login_name}`
if (cats) {
	tmap_url += `?cats=${encoded_cats}`
}

if (is_sorted_by_newest) {
	if (cats) {
		tmap_url += `&sort_by=newest`
	} else {
		tmap_url += `?sort_by=newest`
	}
}

if (nsfw) {
	if (cats || sort_by) {
		tmap_url += `&nsfw=true`
	} else {
		tmap_url += `?nsfw=true`
	}
}

const tmap_resp = token
	? await fetch_with_handle_redirect(tmap_url, {
			headers: {
				Authorization: `Bearer ${token}`,
			},
		})
	: await fetch_with_handle_redirect(tmap_url)
if (!tmap_resp.Response || tmap_resp.RedirectTo) {
	return Astro.redirect(tmap_resp.RedirectTo)
}
tmap = await tmap_resp.Response.json()
const used_sections = tmap_sections.filter((s) => tmap[s]?.length)

// Display about if used (unfiltered only)
let profile: types.Profile | undefined
let display_pfp = false
let display_about = false

if (!cats && tmap.hasOwnProperty('Profile')) {
	profile = (tmap as types.TreasureMap).Profile
	const has_pfp = profile.PFP?.length > 0
	display_pfp = has_pfp || is_signed_in_user

	const has_about = profile.About?.length > 0
	display_about = has_about || is_signed_in_user
}

// Display NSFW links count if > 0
const nsfw_links_count = tmap.NSFWLinksCount
---

<BaseLayout Title={page_title}>
	<main>
		<h1 class={profile ? 'has-profile' : ''}>{login_name}'s Treasure Map</h1>

		<!-- Profile  -->
		{profile && (display_about || display_pfp) ? (
			<Profile
				client:load
				LoginName={login_name}
				SignedInUser={user}
				CreatedAt={profile.Created}
				InitialPFP={profile.PFP}
				InitialAboutText={profile.About}
				InitialEmailText={profile.Email}
				Token={token}
			/>
		) : null}

		<!-- Overview -->
		{used_sections.length ? 
			<section id='overview' class='flex'>
				<div>
					<TopCats
						TopCats={tmap.Cats}
						CatsParams={encoded_cats}
						SortBy={sort_by}
						NSFW={nsfw}
						IsTmapFromUser={login_name}
					/>
				</div>
				{used_sections.length > 1 ? <div id="skip-to-section-container">
					<h2>Skip to Section</h2>
					<ul id='skip-to-link-section'>
						{
							used_sections.map((s) => (
								<li>
									<a href={`#${s}`}>{s}</a>
								</li>
							))
						}
					</ul>
				</div> : null}
			</section> 
		: null}

		<!-- Config -->
		{<section id='sort-and-filter'>
			<h2>Sort and Filter</h2>

			{/* Sort By */}
			<p id="toggle-sort-by">Sort By: 
				<a href={opposite_sort_URL}>{is_sorted_by_newest ? 'rating' : 'newest'}</a>
			</p>

			{/* NSFW */}
			{nsfw_links_count ? 
				<p id="nsfw-filter">
					NSFW links ({nsfw_links_count}):
					<span>
						{nsfw ? <a href={`/map/${login_name}${cats ? `?cats=${encoded_cats}` : ''}${sort_by ? cats ? `&sort_by=${sort_by}` : `?sort_by=${sort_by}` : ''}`}>hide</a> : <a href={`/map/${login_name}${cats ? `?cats=${encoded_cats}` : ''}${sort_by ? cats ? `&sort_by=${sort_by}` : `?sort_by=${sort_by}` : ''}${cats || sort_by ? `&nsfw=true` : '?nsfw=true'}`}>unhide</a>}
					</span>
				</p>
			: null}

			{/* Cats */}
			{cats ? <div id='cats-filter-container' class="flex">
				<div id="cats-filter-actions">
					<p id="cats-filter">
						Cats Filter:
						<span id='clear-cats-filter'>
							<a href={`/map/${login_name}${sort_by ? `?sort_by=${sort_by}` : ''}${nsfw ? sort_by ? '&nsfw=true' : '?nsfw=true' : ''}`}>clear</a>
						</span>	
					</p>
					<p id="transfer-to-global-map">
						<a href={`/search?cats=${encoded_cats}${sort_by ? `&sort_by=${sort_by}` : ''}${nsfw ? sort_by ? '&nsfw=true' : '?nsfw=true' : ''}`}>Transfer cats to Global Treasure Map</a>
					</p>
				</div>
				<ul id='cat-list'>
					{cats_split.length > 1 ? (
						cats_split.map((cat) => {
							return (
								<TagCat Cat={cat} IsNSFW={cat === 'NSFW'} />
							)
						})
					) : (
						<TagCat Cat={cats_split[0]} IsNSFW={cats_split[0] === 'NSFW'} />
					)}
				</ul>
			</div> : null}
		</section>}

		<!-- Links Sections -->
		{used_sections.length ? 
			used_sections.map((s) => (
				<section id={s} class='link-section'>
					{tmap.SectionsWithMore?.length && tmap.SectionsWithMore?.includes(s.toLowerCase()) ? 
						<div class="section-with-more">
							<h2>{s}</h2>
							<span class="see-all">
								<a href={`/map/${login_name}/${s.toLowerCase()}${cats ? `?cats=${encoded_cats}` : ''}${sort_by ? cats ? `&sort_by=${sort_by}` : `?sort_by=${sort_by}` : ''}${nsfw ? sort_by ? '&nsfw=true' : '?nsfw=true' : ''}`}>See All</a>
							</span>
						</div>
					: <h2>{s}</h2>}
					<ol>
						{tmap[s].map((link) => (
							<Link
								client:load
								Link={link}
								NSFWCatLinks={nsfw}
								CatsFromUser={
									link.CatsFromUser
										? login_name
										: undefined
								}
								IsTmapPage={true}
								Token={token}
								User={user}
							/>
						))}
					</ol>
				</section>
			))
		: <section>
			<p id="no-links">No links found.</p>
			<p>&macr;&bsol;&lowbar;&lpar;&#x30c4;&rpar;&lowbar;&sol;&macr;</p>
		</section>}

		<ScrollUp />
	</main>
</BaseLayout>

<style>	
	h1 {
		text-align: left;
	}
	h1.has-profile {
		margin-bottom: 0;
	}

	p#profile-created {
		margin: 0.5rem 0 1rem;
	}

	section#sort-and-filter {
		#nsfw-filter {
			margin-top: 0;
		}
		
		#cats-filter-container {
			display: flex;
			flex-direction: column;
			margin-bottom: 0.5rem;

			#cats-filter-actions {
				margin-right: 1rem;

				#cats-filter {
					margin-top: 1rem;
				}
			}

			#transfer-to-global-map,
			#clear-cats-filter {
				margin: 0;
			}

			#cat-list {
				margin-bottom: 0;
			}
		}
	}

	#profile {
		padding-top: 0;

		astro-island:has(div#profile-pic) + pre {
			margin-top: 1rem;
		}
	}

	#overview {
		display: flex;
		
		div:has(#skip-to-link-section) {
			margin: 0 auto;
		}

		#skip-to-link-section {
			list-style: none;
			margin: 0;
			padding: 0;
		}

		#skip-to-link-section {
			padding: 0.5rem;
		}
	}

	section.link-section {
		padding: 0 0 0.5rem;

		> .section-with-more h2 {
			display: inline;
		}

		> h2,
		> .section-with-more {
			position: sticky;
			top: 0px;
			z-index: 1;
			padding: 1rem 0;
			background-color: #13151a;
		}

		.section-with-more span {
			font-size: 0.9rem;
			vertical-align: super;
			margin-left: 0.5rem;
		}

		ol {
			max-width: calc(100% - 1rem);
			margin-top: 0;
			margin-bottom: 0.5rem;
			margin-left: auto;
			padding: 0;
		}
	}

	@media (min-width: 480px) {
		section#sort-and-filter {
			#cats-filter-container {
				flex-direction: row;

				#transfer-to-global-map,
				#clear-cats-filter {
					margin: 0;
				}
				
				#cat-list {
					margin: 0 auto;
					align-content: center;
				}
			}
		}
		#overview > * {
			max-width: 50%;
		}
	}
</style>
