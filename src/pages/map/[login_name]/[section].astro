---
import Rankings from '../../../components/Rankings/Rankings.astro'
import ScrollUp from '../../../components/ScrollUp.astro'
import SearchFilters from '../../../components/SearchFilters/Filters'
import { TMAP_ENDPOINT } from '../../../constants'
import BaseLayout from '../../../layouts/BaseLayout.astro'
import {
Periods,
tmap_sections,
type Period,
type SortMetric,
type TreasureMapSection
} from '../../../types'
import fetch_with_handle_redirect from '../../../util/fetch_with_handle_redirect'

// Auth
const token = Astro.cookies.get('token')?.value
const user = Astro.cookies.get('user')?.value

// Params
// login_name
const { login_name } = Astro.params
if (!login_name) {
	return Astro.redirect('/')
}
let page_title = `${login_name}'s Treasure Map`

// section
let section_name = Astro.params.section?.toLowerCase()
if (!section_name || !tmap_sections.map((s) => s.toLowerCase()).includes(section_name)) {
    return Astro.redirect(`/map/${login_name}`)
}

let tmap_section_url = TMAP_ENDPOINT + `/${login_name}` + `?section=${section_name}`

// cats
let cats = ""
let encoded_cats = ""
let cats_split: string[] = []
if (Astro.url.searchParams.get('cats')) {
	cats = Astro.url.searchParams.get('cats') as string
    cats_split = cats.split(',')

    if (cats.length) {
		page_title += ' (Filtered)'

        // encode cats reserved chars
        encoded_cats = encodeURIComponent(cats)
        tmap_section_url += `&cats=${encoded_cats}`
	}
}

// period
let period: Period = 'all'
if (
	Astro.url.searchParams.get('period') &&
	(Periods as readonly string[]).includes(
		Astro.url.searchParams.get('period') as Period
	)
) {
	period = Astro.url.searchParams.get('period') as Period
    tmap_section_url += `&period=${period}`
}

// url contains
let url_contains = ""
if (Astro.url.searchParams.get('url_contains')) {
    url_contains = Astro.url.searchParams.get('url_contains') as string
    tmap_section_url += `&url_contains=${url_contains}`
}

// nsfw
let nsfw: boolean = false
if (Astro.url.searchParams.get('nsfw') && Astro.url.searchParams.get('nsfw') === 'true') {
	nsfw = true
    tmap_section_url += `&nsfw=true`
}

// sort by
let sort_by: SortMetric | undefined
const sort_by_params = Astro.url.searchParams.get('sort_by')
const is_sorted_by_newest = sort_by_params === 'newest'
if (is_sorted_by_newest) {
	sort_by = 'newest'
    tmap_section_url += `&sort_by=newest`
}

// page
let page = 1
if (Astro.url.searchParams.get('page')) {
	page = parseInt(Astro.url.searchParams.get('page') as string)
    
    if (page > 1) {
        tmap_section_url += `&page=${page}`
    }
}

// Get Tmap Section
const tmap_resp = token
	? await fetch_with_handle_redirect(tmap_section_url, {
			headers: {
				Authorization: `Bearer ${token}`,
			},
		})
	: await fetch_with_handle_redirect(tmap_section_url)
if (!tmap_resp.Response || tmap_resp.RedirectTo) {
	return Astro.redirect(tmap_resp.RedirectTo)
}
const section_data: TreasureMapSection = await tmap_resp.Response.json()
const single_tmap_section = section_data.Links
---

<BaseLayout Title={page_title}>
	<main>
		<h1>{login_name}</h1>
        <p class="subtitle">({section_name[0].toUpperCase() + section_name.slice(1)})</p>

        <a id="see-all-sections" href={Astro.url.href.replace(`/${section_name}`, '')}>
            <img src='../../back.svg' height={18} width={18} />
            All sections
        </a>

		<SearchFilters
			client:load 
			Endpoint={"/map"}
			TmapOwnerLoginName={login_name}
            SingleTmapSectionName={section_name as typeof tmap_sections[number]}
			TmapNSFWLinksCount={section_data.NSFWLinksCount}
			InitialCats={cats_split}
			InitialPeriod={period}
			InitialURLContains={url_contains}
			InitialSortBy={sort_by}
			InitialNSFW={nsfw}
		/>


		<Rankings
            CatsParams={encoded_cats}
            PeriodParams={period}
            NSFWParams={nsfw}
            SortByParams={sort_by}
            PageParams={page}
            PageCount={section_data.PageCount}
            TopCats={section_data.Cats}
            SingleTmapSection={single_tmap_section}
            SingleTmapSectionName={section_name as typeof tmap_sections[number]}
            IsTmapFromUser={login_name}
            User={user}
            Token={token}
        />

		<ScrollUp />
	</main>
</BaseLayout>

<style>
    h1:has(+ .subtitle) { 
        margin-bottom: 0.5rem; 
    }

    p.subtitle {
        text-align: center;
    }

    a#see-all-sections {
        display: flex;
        align-items: center;
        gap: 5px;
        width: fit-content;
        margin-bottom: 1rem;
    }

    ol {
        max-width: calc(100% - 1rem);
        margin: 0;
        margin-top: 0.5rem;
        margin-left: auto;
        padding: 0;
    }
</style>
