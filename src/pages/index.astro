---
import TopCats from '../components/Rankings/TopCats.astro'
import TopContributors from '../components/Rankings/TopContributors.astro'
import TopLinks from '../components/Rankings/TopLinks.astro'
import ScrollUp from '../components/ScrollUp.astro'
import SearchCats from '../components/SearchFilters/Cats'
import { CATS_ENDPOINT, CONTRIBUTORS_ENDPOINT, LINKS_ENDPOINT, TOTALS_ENDPOINT } from '../constants'
import BaseLayout from '../layouts/BaseLayout.astro'
import { Periods, type CatCount, type Contributor, type PaginatedLinks, type Totals } from '../types'
import fetch_with_handle_redirect from '../util/fetch_with_handle_redirect'

// Auth
const token = Astro.cookies.get('token')?.value
const user = Astro.cookies.get('user')?.value

// Get top cats
const top_cats_resp = await (token
	? fetch_with_handle_redirect(CATS_ENDPOINT, {
			headers: { Authorization: `Bearer ${token}` },
		})
	: fetch_with_handle_redirect(CATS_ENDPOINT))
if (!top_cats_resp.Response || top_cats_resp.RedirectTo) {
	return Astro.redirect(top_cats_resp.RedirectTo)
}
const top_cats: CatCount[] = await top_cats_resp.Response?.json()

// Get top contributors
const top_contributors_resp = await fetch_with_handle_redirect(CONTRIBUTORS_ENDPOINT)
if (!top_contributors_resp.Response || top_contributors_resp.RedirectTo) {
	return Astro.redirect(top_contributors_resp.RedirectTo)
}
const top_contributors: Contributor[] = await top_contributors_resp.Response.json()

// Get top links
const DEFAULT_PERIOD = Periods[2] // month
const links_url = LINKS_ENDPOINT + `?period=${DEFAULT_PERIOD}`
const get_links_resp = await (token
	? fetch_with_handle_redirect(links_url, {
			headers: { Authorization: `Bearer ${token}` },
		})
	: fetch_with_handle_redirect(links_url))
if (!get_links_resp.Response || get_links_resp.RedirectTo) {
	return Astro.redirect(get_links_resp.RedirectTo)
}
const data: PaginatedLinks = await get_links_resp.Response.json()
const links = data.Links

const other_periods = links?.length ? Periods.filter((other) => other !== 'month') : ['year', 'all']

// Get totals
const totals_resp = await fetch_with_handle_redirect(TOTALS_ENDPOINT)
if (!totals_resp.Response || totals_resp.RedirectTo) {
	return Astro.redirect(totals_resp.RedirectTo)
}
const totals: Totals = await totals_resp.Response.json()
---

<BaseLayout Title='FITM: Share and Discover Web Treasure'>
	<main>
		<h1>Welcome Home, Good Hunter</h1>
		<p id='subtitle'>What is it you desire?</p>

		<SearchCats client:load SelectedCats={[]} SetSelectedCats={() => {}} IsHomePage />

		<div id="rankings">
			<section>
				<TopCats TopCats={top_cats} />
			</section>
			<TopContributors Contributors={top_contributors} />
		</div>

		<section id='top-links'>
			<ul id='change-period'>
				<li>
					Top links this month:
				</li>
				{
					other_periods.map((period) => (
						<li class='period'>
							<a href={`/search?period=${period}`}>{period}</a>
						</li>
					))
				}
			</ul>

			{links?.length ? <TopLinks 
				Links={links}
				NextPage={data.NextPage}
				Token={token}
				User={user}
			/> : <p>None :(</p>}
		</section>

		<div id="totals">
			<p><span class="total">{totals.Links}</span> <span>Links |</span> <span class="total">{totals.Clicks}</span> <span>Clicks |</span> <span class="total">{totals.Contributors}</span> <span>Contributors</span></p>
			<p><span class="total">{totals.Likes}</span> <span>Likes |</span> <span class="total">{totals.Tags}</span> <span>Tags |</span> <span class="total">{totals.Summaries}</span> <span>Summaries</span></p>
		</div>

		<ScrollUp />
	</main>
</BaseLayout>

<style>
	h1 {
		margin-bottom: 0.5rem;
	}

	p#subtitle {
		background: hsla(180, 33%, 82%, 0.05);
		padding: 3px;
		margin-bottom: 0.5rem;
	}

	p#subtitle,
	h3#add-link {
		text-align: center;
	}

	ul#change-period {
		display: flex;
		list-style: none;
		padding-inline-start: 1rem;
		margin-top: 0;
		margin-bottom: 1.5rem;

		li:nth-of-type(2) {
			margin-left: 1rem;
		}
	}

	h3#add-link,
	ul#change-period {
		a,
		a:visited {
			color: var(--text);
		}
	}

	#totals {
		padding: 0.5rem 0;
		border-bottom: 1px solid rgba(255, 255, 255, 0.05);
		text-align: center;

		p {
			padding-left: 1rem;
		}

		.total {
			font-weight: bold;
			color: var(--sky);
		}

		span:not(.total) {
			opacity: 0.85;
		}
	}

	li.period {
		margin-right: 0.5rem;
	}

	li.period:last-of-type {
		margin-right: 0;
	}

	section#top-links {
		padding: 1rem 0;
	}
</style>
