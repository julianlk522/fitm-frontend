---
import Rankings from '../components/Rankings/Rankings.astro'
import ScrollUp from '../components/ScrollUp.astro'
import SearchCats from '../components/SearchFilters/Cats'
import { CATS_ENDPOINT, CONTRIBUTORS_ENDPOINT, LINKS_ENDPOINT, TOTALS_ENDPOINT } from '../constants'
import BaseLayout from '../layouts/BaseLayout.astro'
import { Periods, type CatCount, type Contributor, type PaginatedLinks, type Totals } from '../types'
import fetch_with_handle_redirect from '../util/fetch_with_handle_redirect'

// Auth
const token = Astro.cookies.get('token')?.value
const user = Astro.cookies.get('user')?.value

// Get top cats
const top_cats_resp = await (token
	? fetch_with_handle_redirect(CATS_ENDPOINT, {
			headers: { Authorization: `Bearer ${token}` },
		})
	: fetch_with_handle_redirect(CATS_ENDPOINT))
if (!top_cats_resp.Response || top_cats_resp.RedirectTo) {
	return Astro.redirect(top_cats_resp.RedirectTo)
}
const top_cats: CatCount[] = await top_cats_resp.Response?.json()

// Get top contributors
const top_contributors_resp = await fetch_with_handle_redirect(CONTRIBUTORS_ENDPOINT)
if (!top_contributors_resp.Response || top_contributors_resp.RedirectTo) {
	return Astro.redirect(top_contributors_resp.RedirectTo)
}
const top_contributors: Contributor[] = await top_contributors_resp.Response.json()

// Get top links
const DEFAULT_PERIOD = Periods[2] // month
const links_url = LINKS_ENDPOINT + `?period=${DEFAULT_PERIOD}`
const get_links_resp = await (token
	? fetch_with_handle_redirect(links_url, {
			headers: { Authorization: `Bearer ${token}` },
		})
	: fetch_with_handle_redirect(links_url))
if (!get_links_resp.Response || get_links_resp.RedirectTo) {
	return Astro.redirect(get_links_resp.RedirectTo)
}
const links_data: PaginatedLinks = await get_links_resp.Response.json()
const links = links_data.Links

// Get totals
const totals_resp = await fetch_with_handle_redirect(TOTALS_ENDPOINT)
if (!totals_resp.Response || totals_resp.RedirectTo) {
	return Astro.redirect(totals_resp.RedirectTo)
}
const totals: Totals = await totals_resp.Response.json()
---

<BaseLayout Title='FITM: Share and Discover Web Treasure'>
	<main>
		<h1>Welcome Home, Good Hunter</h1>
		<p id='subtitle'>What is it you desire?</p>

		<SearchCats client:load SelectedCats={[]} SetSelectedCats={() => {}} IsHomePage />

		<Rankings Links={links} PageCount={links_data.PageCount} TopCats={top_cats} TopContributors={top_contributors} Token={token} User={user} IsHomePage />

		<div id="totals">
			<p><span class="total">{totals.Links}</span> <span>Links</span> <span>•</span> <span class="total">{totals.Clicks}</span> <span>Clicks</span> <span>•</span> <span class="total">{totals.Likes}</span> <span>Likes</span></p>

			<p><span class="total">{totals.Contributors}</span> <span>Treasure Hunters</span> <span>•</span> <span class="total">{totals.Tags}</span> <span>Tags</span> <span>•</span> <span class="total">{totals.Summaries}</span> <span>Summaries</span></p>
		</div>

		<ScrollUp />
	</main>
</BaseLayout>

<style>
	h1 {
		margin-bottom: 0.5rem;
	}

	p#subtitle {
		background: hsla(180, 33%, 82%, 0.05);
		padding: 3px;
		margin-bottom: 0.5rem;
		text-align: center;
	}

	#totals {
		padding: 1rem 0;
		border-bottom: 1px solid rgba(255, 255, 255, 0.05);
		text-align: center;

		p {
			font-size: 0.9rem;
			margin-top: 0;
			display: flex;
			gap: 2px;
			justify-content: center;
		}

		.total {
			font-weight: bold;
			color: var(--sky);
		}

		span:not(.total) {
			opacity: 0.85;
		}
	}

	@media (min-width: 400px) {
		#totals p {
			gap: 4px;
		}
	}

	@media (min-width: 680px) {
		#totals p {
			justify-content: flex-end;
			gap: 8px;
		}
	}
</style>
