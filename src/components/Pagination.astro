---
import type { Period, SortMetric, tmap_sections } from '../types'
import get_paginated_href from '../util/pagination'

interface Props {
	Cats?: string
	Period?: Period
	SortBy?: SortMetric
	HasNSFW?: boolean
	URLContains?: string
	Page: number
	PageCount: number
	SingleTmapSectionName?: typeof tmap_sections[number]
	TmapOwner?: string
}

const { 
	Cats: cats, 
	Period: period, 
	SortBy: sort_by, 
	HasNSFW: nsfw, 
	URLContains: url_contains,
	Page: page, 
	PageCount: page_count, 
	SingleTmapSectionName: single_tmap_section_name,
	TmapOwner: tmap_owner, 
} = Astro.props

let href_without_page = single_tmap_section_name ? `/map/${tmap_owner}/${single_tmap_section_name.toLowerCase()}` : '/search'
let has_other_params = false

const has_cats = cats !== undefined && cats.length
const has_period = period && period !== 'all'
const is_sort_by_newest = sort_by && sort_by === 'newest'
const has_url_contains = url_contains && url_contains.length

if (has_period) {
	href_without_page += `?period=${period}`
	has_other_params = true
}
if (has_cats) {
	if (has_other_params) {
		href_without_page += `&cats=${cats}`
	} else {
		href_without_page += `?cats=${cats}`
		has_other_params = true
	}
}
if (is_sort_by_newest) {
	if (has_other_params) {
		href_without_page += `&sort_by=newest`
	} else {
		href_without_page += `?sort_by=newest`
		has_other_params = true
	}
}
if (nsfw) {
	if (has_other_params) {
		href_without_page += `&nsfw=true`
	} else {
		href_without_page += `?nsfw=true`
		has_other_params = true
	}
}
if (has_url_contains) {
	if (has_other_params) {
		href_without_page += `&url_contains=${url_contains}`
	} else {
		href_without_page += `?url_contains=${url_contains}`
		has_other_params = true
	}
}
---

<nav class="pagination">
	{page > 1 ? 
		<a href={
			get_paginated_href({
				BaseHref: href_without_page,
				Page: 1,
				HasOtherParams: has_other_params,
			})
		}>1</a> 
		<>
			{ page > 3 ? 
				<span>...</span> 
			: <span> . </span>
			}
		</>
	: null}

	{
		page > 2 ? (
			<span>
				<a href={
					get_paginated_href({
						BaseHref: href_without_page,
						Page: page - 1,
						HasOtherParams: has_other_params,
					})
				}>
					{page - 1}
				</a>
				{' . '}
			</span>
		) : null
	}

	<span>{page}</span>

	{
		page_count > page ? (
			<span>
				{' . '}
				<a href={
					get_paginated_href({
						BaseHref: href_without_page,
						Page: page + 1,
						HasOtherParams: has_other_params,
					})
				}>
					{page + 1}
				</a>
			</span>
		) : null
	}

	{
		page_count > page + 1 ? 
			<>
				<span>
					{' . '}
					<a href={
						get_paginated_href({
							BaseHref: href_without_page,
							Page: page + 2,
							HasOtherParams: has_other_params,
						})
					}>{page + 2}</a>
				</span> 
				{page_count > page + 2 ? 
					<span>
						{page_count > page + 3 ? <span> ... </span> : <span> . </span>}
						<a href={
							get_paginated_href({
								BaseHref: href_without_page,
								Page: page_count,
								HasOtherParams: has_other_params,
							})
						}>{page_count}</a>
					</span>	
				: null
				}
			</>
		: null
	}
</nav>

<style>
	nav.pagination {
		font-size: 1.1rem;
		font-weight: bold;
		text-align: center;
		margin-top: 1rem;
		padding: 1rem 0;
	}
</style>