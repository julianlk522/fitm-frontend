---
import type { Period, SortMetric, tmap_sections } from '../types'
import get_paginated_href from '../util/pagination'

interface Props {
	Cats?: string
	Period?: Period
	SortBy?: SortMetric
	HasNSFW?: boolean
	URLContains?: string
	Page: number
	Pages: number
	SingleTmapSectionName?: typeof tmap_sections[number]
	TmapOwner?: string
}

const { 
	Cats: cats, 
	Period: period, 
	SortBy: sort_by, 
	HasNSFW: nsfw, 
	URLContains: url_contains,
	Page: page, 
	Pages: pages, 
	SingleTmapSectionName: single_tmap_section_name,
	TmapOwner: tmap_owner, 
} = Astro.props

const params = new URLSearchParams()
if (cats !== undefined && cats.length) {
	params.set('cats', cats)
}
if (period && period !== 'all') {
	params.set('period', period)
}
if (sort_by && sort_by !== 'rating') {
	params.set('sort_by', sort_by)
}
if (nsfw) {
	params.set('nsfw', 'true')
}
if (url_contains && url_contains.length) {
	params.set('url_contains', url_contains)
}

let base_href = single_tmap_section_name 
	? `/map/${tmap_owner}/${single_tmap_section_name.toLowerCase()}` 
	: '/search'

---

<nav class="pagination">
	{page > 1 ? 
		<>
			<a href={
				get_paginated_href({
					BaseHref: base_href,
					OtherParams: params,
					Page: 1,
				})
			}>1</a>

			{ page > 3 ?
				<span>...</span>
			: <span> . </span>
			}
		</>
	: null}

	{
		page > 2 ? (
			<span>
				<a href={
					get_paginated_href({
						BaseHref: base_href,
						OtherParams: params,
						Page: page - 1,
					})
				}>
					{page - 1}
				</a>
				{' . '}
			</span>
		) : null
	}

	<span>{page}</span>

	{
		pages > page ? (
			<span>
				{' . '}
				<a href={
					get_paginated_href({
						BaseHref: base_href,
						OtherParams: params,
						Page: page + 1,
					})
				}>
					{page + 1}
				</a>
			</span>
		) : null
	}

	{
		pages > page + 1 ? 
			<>
				<span>
					{' . '}
					<a href={
						get_paginated_href({
							BaseHref: base_href,
							OtherParams: params,
							Page: page + 2,
						})
					}>{page + 2}</a>
				</span> 
				{pages > page + 2 ? 
					<span>
						{pages > page + 3 
							? <span> ... </span> 
							: <span> . </span>
						}
						<a href={
							get_paginated_href({
								BaseHref: base_href,
								OtherParams: params,
								Page: pages,
							})
						}>
							{pages}
						</a>
					</span>
				: null}
			</>
		: null
	}
</nav>

<style>
	nav.pagination {
		font-size: 1.1rem;
		font-weight: bold;
		text-align: center;
		margin-top: 1rem;
		padding: 1rem 0;
	}
</style>