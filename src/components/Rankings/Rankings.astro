---
import type { CatCount, Contributor, FilteredTreasureMap, Link, Period, SortMetric, TmapLink, TreasureMap } from "../../types";
import { tmap_sections } from "../../types";
import ScrollUp from "../ScrollUp.astro";
import MergedResultsNotice from "./MergedResultsNotice.astro";
import TopCats from "./TopCats.astro";
import TopContributors from "./TopContributors.astro";
import TopLinks from "./TopLinks.astro";

interface Props {
    Links?: Link[]
    NSFWParams?: boolean
    CatsParams?: string
    MergedCats?: string[]
    PeriodParams?: Period
    SortByParams?: SortMetric
    PageParams?: number
    PageCount?: number
    TopCats: CatCount[]
    TopContributors?: Contributor[]
    IsHomePage?: boolean
    Tmap?: TreasureMap | FilteredTreasureMap
    SingleTmapSection?: TmapLink[]
    SingleTmapSectionName?: typeof tmap_sections[number]
    IsTmapFromUser?: string
    Token?: string
    User?: string
}

const { 
    Links: links, 
    NSFWParams: nsfw_params, 
    CatsParams: cats_params, 
    MergedCats: merged_cats, 
    PeriodParams: period_params, 
    SortByParams: sort_by_params, 
    PageParams: page, 
    PageCount: page_count, 
    TopCats: top_cats, 
    TopContributors: top_contributors, 
    IsHomePage: is_home_page, 
    Tmap: tmap, 
    SingleTmapSection: single_tmap_section,
    SingleTmapSectionName: single_tmap_section_name, 
    IsTmapFromUser: tmap_owner, 
    User: user, 
    Token: token, 
} = Astro.props

let multiple_tmap_sections: typeof tmap_sections[number][] = []
if (tmap) {
    multiple_tmap_sections = tmap_sections.filter((s) => tmap[s]?.length)
}

const no_links_found = links && links.length === 0 || tmap && multiple_tmap_sections.length === 0
---

<div id="rankings" class={is_home_page ? 'home' : ''}>
    {merged_cats && merged_cats.length ? (
        <MergedResultsNotice MergedCats={merged_cats} />
    ) : null}

    {no_links_found 
        ? null 
        : <aside id="top-cats-and-contributors" class={tmap || single_tmap_section 
            ? 'tmap' 
            : ''
        }>        
            {multiple_tmap_sections && multiple_tmap_sections.length > 1 
                ? <div id="skip-to-section-container">
                    <h2>Go to Section</h2>
                    <ul id='skip-to-link-section'>
                        {
                            multiple_tmap_sections.map((s) => (
                                <li>
                                    <a href={`#${s.toLowerCase()}`}>{s}</a>
                                </li>
                            ))
                        }
                    </ul>
                </div> 
                : top_contributors 
                    ? <TopContributors Contributors={top_contributors} /> 
                    : null
            }

            <TopCats 
                TopCats={top_cats} 
                CatsParams={cats_params} 
                PeriodParams={period_params} 
                SortByParams={sort_by_params} 
                NSFWParams={nsfw_params} 
                IsTmapFromUser={tmap_owner} 
                SingleTmapSection={single_tmap_section_name}
            />
        </aside>
    }

  <TopLinks 
        Links={links}
        NSFW={nsfw_params}
        Cats={cats_params}
        Period={period_params}
        SortBy={sort_by_params}
        Page={page}
        PageCount={page_count}
        Tmap={tmap}
        MultipleTmapSections={multiple_tmap_sections}
        SingleTmapSection={single_tmap_section}
        SingleTmapSectionName={single_tmap_section_name}
        TmapOwner={tmap_owner}
        IsHomePage={is_home_page}
        Token={token}
        User={user}
    />

    {links && links.length > 5 
        ? <ScrollUp /> 
        : null
    }
</div>

<style>
    #rankings {
		display: flex;
		flex-direction: column;
        padding-top: 0.5rem;

        aside#top-cats-and-contributors {
			display: flex;
			flex-direction: column;
			justify-content: space-evenly;
			gap: 1rem;
			min-width: fit-content;
			padding: 0.5rem 0;

			> div {
				border-bottom: 1px solid rgba(255, 255, 255, 0.05);
				padding-bottom: 0.5rem;
			}
		}

        ul#skip-to-link-section {
            margin-bottom: 0;
            padding-inline-start: 1.5rem;
        }

        /* had to put this here to increase specificity */
        @media (min-width: 450px) {
            aside#top-cats-and-contributors {
                flex-direction: row;

                > div {
                    margin-top: 0;
                }
            }
        }

        @media (min-width: 680px) {
            aside#top-cats-and-contributors {
                align-items: unset;
            }
        }
	}

    #rankings.home {
        margin-top: 1rem;
    }

    #rankings:has(p#no-further-cats) {
		padding: 0.5rem 0;
	}

    @media (min-width: 400px) {
        #rankings {
            h2.has-section-after {
                font-size: 1.25rem;
            }
        }
    }

    @media (min-width: 680px) {
        #rankings {
            flex-direction: row;
            gap: 4rem;

            aside#top-cats-and-contributors {
                flex-direction: column;
                justify-content: start;
                position: sticky;
                top: 1rem;
                height: min-content;
            }

            aside#top-cats-and-contributors.tmap {
                margin-top: 1rem;
            }
        }

        #rankings.home {
            margin-top: 2rem;
        }
    }

    @media (min-width: 786px) {
        #rankings {
            gap: 6rem;
        }
    }
</style>