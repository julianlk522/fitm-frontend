---
import { LINKS_PAGE_LIMIT } from '../../constants'
import * as types from '../../types'
import Link from '../Link/Link'
import Pagination from '../Pagination.astro'

interface Props {
    Links: types.Link[]
    NSFW?: boolean
    Cats?: string
    Period?: types.Period
    SortBy?: types.SortMetric
    Token?: string
    User?: string
    Page?: number
    PageCount?: number
}
const { Links: links, NSFW: nsfw, Cats: cats, Period: period, SortBy: sort_by, Page: page, PageCount: page_count, Token: token, User: user } = Astro.props

const is_only_page = !page || !page_count || (page === 1 && page_count === 1)
---

<>    
    <ol id='top-links' start={page ? (page - 1) * LINKS_PAGE_LIMIT + 1 : ''}>
        {links?.map((link) => (
            <Link
                client:load
                Link={link}
                Token={token}
                User={user}
            />
        ))}
    </ol>

    {is_only_page ? null : <Pagination
        Cats={cats}
        Period={period ?? 'month'}
        SortBy={sort_by}
        HasNSFW={nsfw}
        Page={page ?? 1}
        PageCount={page_count}
    />}
</>

<style>
    #top-links {
        min-width: fit-content;
        margin: 0.5rem 0;
        margin-left: auto;
        padding: 0;
        padding-inline-start: 1rem;
    }

    #top-links:has(+ nav.pagination) {
        margin-bottom: 0.5rem;
    }

    @media (min-width: 450px) {
        #top-links {
            padding-inline-start: 2rem;
        }
    }
</style>